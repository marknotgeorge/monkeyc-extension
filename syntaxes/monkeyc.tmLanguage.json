{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Monkey C",
  "fileTypes": [
    "mc"
  ],
  "patterns": [
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "statements": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#switch-statement"
        },
        {
          "include": "#for-loop"
        },
        {
          "include": "#after-operator-block"
        },
        {
          "include": "#decl-block"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "var-expr": {
      "name": "meta.var.expr.mc",
      "begin": "(?<!\\.|\\$)\\b(var|const(?!\\s+enum\\b))\\b(?!\\$)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.mc"
        }
      },
      "end": "(?=$|;|})",
      "patterns": [
        {
          "include": "#var-single-variable"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "var-single-variable": {
      "patterns": [
        {
          "name": "meta.var-single-variable.expr.mc",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n  (=\\s*(\n    (function\\s*[(<]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>) |\n    ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\s*:)|(\\.\\.\\.) )) |\n    ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s*[^=>])|(\\s*[,]))) |\n    ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>))\n  ) |\n  (:\\s*(\n    (<) |\n    ([(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )))\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.mc"
            }
          },
          "end": "(?=$|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#string"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.mc",
          "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "beginCaptures": {
            "1": {
              "name": "variable.other.constant.mc"
            }
          },
          "end": "(?=$|[;,=}]|(\\s+(of|in)\\s+))"
        },
        {
          "name": "meta.var-single-variable.expr.mc",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.readwrite.mc"
            }
          },
          "end": "(?=$|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#string"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "ternary-expression": {
      "begin": "(\\?)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.mc"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.mc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression": {
      "name": "meta.expression.mc",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#function-declaration"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#ternary-expression"
        },
        {
          "include": "#new-expr"
        },
        {
          "include": "#object-literal"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#support-objects"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-accessor"
        }
      ]
    },
    "control-statement": {
      "patterns": [
        {
          "name": "keyword.control.trycatch.mc",
          "match": "(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$)"
        },
        {
          "name": "keyword.control.loop.mc",
          "match": "(?<!\\.|\\$)\\b(break|continue|do|while)\\b(?!\\$)"
        },
        {
          "name": "keyword.control.flow.mc",
          "match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$)"
        },
        {
          "name": "keyword.control.switch.mc",
          "match": "(?<!\\.|\\$)\\b(case|default|switch)\\b(?!\\$)"
        },
        {
          "name": "keyword.control.conditional.mc",
          "match": "(?<!\\.|\\$)\\b(else|if)\\b(?!\\$)"
        }
      ]
    },
    "declaration": {
      "name": "meta.declaration.mc",
      "patterns": [
        {
          "include": "#decorator"
        },
        {
          "include": "#var-expr"
        },
        {
          "include": "#function-declaration"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#namespace-declaration"
        },
        {
          "include": "#import-declaration"
        }
      ]
    },
    "decorator": {
      "name": "meta.decorator.mc",
      "patterns": [
        {
          "match": "(?<!\\.|\\$)(\\(:([_$[:alpha:]][_$[:alnum:]]*)\\))",
          "captures": {
            "0": {
              "name": "storage.type.decorator.mc"
            }
          }
        }
      ]
    },
    "enum-declaration": {
      "name": "meta.enum.declaration.mc",
      "begin": "(?<!\\.|\\$)\\b(enum)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.enum.mc"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.mc"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.mc"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
              "beginCaptures": {
                "0": {
                  "name": "variable.other.enummember.mc"
                }
              },
              "end": "(?=,|\\}|$)",
              "patterns": [
                {
                  "include": "#comment"
                },
                {
                  "include": "#variable-initializer"
                }
              ]
            },
            {
              "begin": "(?=((\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
              "end": "(?=,|\\}|$)",
              "patterns": [
                {
                  "include": "#string"
                },
                {
                  "include": "#array-literal"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#variable-initializer"
                }
              ]
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "namespace-declaration": {
      "name": "meta.namespace.declaration.mc",
      "begin": "(?<!\\.|\\$)\\b(module)\\s+(?=[_$[:alpha:]\"'`])",
      "beginCaptures": {
        "1": {
          "name": "storage.type.namespace.mc"
        }
      },
      "end": "(?=$|\\{)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "name": "entity.name.type.module.mc",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          "include": "#punctuation-accessor"
        }
      ]
    },
    "import-declaration": {
      "name": "meta.import.mc",
      "begin": "(?<!\\.|\\$)\\b(using)(?!(\\s*:)|(\\$))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.import.mc"
        }
      },
      "end": "(?=;|$)",
      "patterns": [
        {
          "include": "#import-export-declaration"
        }
      ]
    },
    "import-export-declaration": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#import-export-clause"
        }
      ]
    },
    "import-export-clause": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "comment": "(default|*|name) as alias",
          "match": "(?x) ([_$[:alpha:]][_$[:alnum:]]*) \\s+ \n  (as) \\s+ ([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.mc"
            },
            "2": {
              "name": "keyword.control.as.mc"
            },
            "3": {
              "name": "entity.name.type.alias.mc"
            }
          }
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "name": "constant.language.import-export-all.mc",
          "match": "\\*"
        },
        {
          "name": "keyword.control.default.mc",
          "match": "\\b(default)\\b"
        },
        {
          "name": "variable.other.readwrite.alias.mc",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "class-declaration": {
      "name": "meta.class.mc",
      "begin": "(?<!\\.|\\$)\\b(?:(class))\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.mc"
        }
      },
      "end": "(?<=\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#class-heritage"
        },
        {
          "match": "[_$[:alpha:]][_$[:alnum:]]*",
          "captures": {
            "0": {
              "name": "entity.name.type.class.mc"
            }
          }
        },
        {
          "include": "#class-body"
        }
      ]
    },
    "class-heritage": {
      "begin": "(?<!\\.|\\$)(?:\\b(extends)\\b)(?!\\$)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.mc"
        }
      },
      "end": "(?=\\{)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#class-heritage"
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*([,<{]|extends|//|/\\*))",
          "captures": {
            "1": {
              "name": "entity.name.type.module.mc"
            },
            "2": {
              "name": "punctuation.accessor.mc"
            }
          }
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*([,<{]|extends|//|/\\*))",
          "captures": {
            "1": {
              "name": "entity.other.inherited-class.mc"
            }
          }
        },
        {
          "include": "#expression"
        }
      ]
    },
    "class-body": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#decorator"
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#access-modifier"
        },
        {
          "include": "#after-operator-block"
        },
        {
          "include": "#decl-block"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "field-declaration": {
      "name": "meta.field.declaration.mc",
      "begin": "(?<!\\()(?:(?<!\\.|\\$)\\b(const|var)\\s+)(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=)?)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.mc"
        }
      },
      "end": "(?=\\}|;|,|$)|(?<=\\})",
      "patterns": [
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "method-declaration": {
      "name": "meta.method.declaration.mc",
      "begin": "(?<!\\.|\\$)(?:\\b(hidden)\\s+)?(?:\\b(function)\\s+)(?:(?:\\b(?:(initialize)|(initialize))\\b(?!\\$|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))?\\s*[\\(\\<]))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.mc"
        },
        "2": {
          "name": "storage.type.function.mc"
        },
        "3": {
          "name": "keyword.operator.new.mc"
        },
        "4": {
          "name": "storage.type.mc"
        },
        "5": {
          "name": "keyword.generator.asterisk.mc"
        }
      },
      "end": "(?=\\}|;|,|$)|(?<=\\})",
      "patterns": [
        {
          "include": "#method-declaration-name"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#function-parameters"
        },
        {
          "include": "#decl-block"
        }
      ]
    },
    "method-declaration-name": {
      "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
      "end": "(?=\\(|\\<)",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#array-literal"
        },
        {
          "name": "entity.name.function.mc",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "function-declaration": {
      "name": "meta.function.mc",
      "begin": "(?<!\\.|\\$)\\b(function\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.mc"
        },
        "2": {
          "name": "entity.name.function.mc"
        }
      },
      "end": "(?=$|;|\\})|(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#function-parameters"
        },
        {
          "include": "#decl-block"
        }
      ]
    },
    "object-literal": {
      "name": "meta.objectliteral.mc",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "decl-block": {
      "name": "meta.block.mc",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#statements"
        }
      ]
    },
    "after-operator-block": {
      "name": "meta.objectliteral.mc",
      "begin": "(?<=[=(,\\[?+!]|return|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "parameter-name": {
      "patterns": [
        {
          "match": "\\s*\\b(hidden)(?=\\s+(hidden)\\s+)",
          "captures": {
            "1": {
              "name": "storage.modifier.mc"
            }
          }
        },
        {
          "match": "(?x)(?:\\s*\\b(hidden|static)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\??)(?=\\s*\n  (=\\s*(\n    (function\\s*[(<]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>) |\n    ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\s*:)|(\\.\\.\\.) )) |\n    ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s*[^=>])|(\\s*[,]))) |\n    ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>))\n  ) |\n  (:\\s*(\n    (<) |\n    ([(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )))\n  )\n)",
          "captures": {
            "1": {
              "name": "storage.modifier.mc"
            },
            "2": {
              "name": "keyword.operator.rest.mc"
            },
            "3": {
              "name": "entity.name.function.mc"
            },
            "4": {
              "name": "keyword.operator.optional.mc"
            }
          }
        },
        {
          "match": "(?:\\s*\\b(hidden|static)\\s+)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*",
          "captures": {
            "1": {
              "name": "storage.modifier.mc"
            },
            "2": {
              "name": "keyword.operator.rest.mc"
            },
            "3": {
              "name": "variable.parameter.mc"
            }
          }
        }
      ]
    },
    "type": {
      "name": "meta.type.mc",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#type-builtin-literals"
        },
        {
          "include": "#type-fn-type-parameters"
        },
        {
          "include": "#type-paren-or-function-parameters"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "function-parameters": {
      "name": "meta.parameters.mc",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.mc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.mc"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#decorator"
        },
        {
          "include": "#parameter-name"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.mc",
          "match": ","
        }
      ]
    },
    "type-builtin-literals": {
      "name": "support.type.builtin.mc",
      "match": "(?<!\\.|\\$)\\b(this|true|false|null)\\b(?!\\$)"
    },
    "type-paren-or-function-parameters": {
      "name": "meta.type.paren.cover.mc",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#function-parameters"
        }
      ]
    },
    "type-fn-type-parameters": {
      "patterns": [
        {
          "name": "meta.type.constructor.mc",
          "match": "(?<!\\.|\\$)\\b(new)\\b(?=\\s*\\<)",
          "captures": {
            "1": {
              "name": "keyword.control.new.mc"
            }
          }
        },
        {
          "name": "meta.type.constructor.mc",
          "begin": "(?<!\\.|\\$)\\b(new)\\b\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.new.mc"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.type.function.mc",
          "begin": "(?<=\\>)\\s*(?=\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.type.function.mc",
          "begin": "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) | \n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        }
      ]
    },
    "type-name": {
      "patterns": [
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.mc"
            },
            "2": {
              "name": "punctuation.accessor.mc"
            }
          }
        },
        {
          "name": "entity.name.type.mc",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "variable-initializer": {
      "patterns": [
        {
          "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.mc"
            }
          },
          "end": "(?=$|[,);}\\]])",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(?<!=|!)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.mc"
            }
          },
          "end": "(?=[,);}\\]])|(?=^\\s*$)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "for-loop": {
      "begin": "(?<!\\.|\\$)\\b(for)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.mc"
        },
        "2": {
          "name": "meta.brace.round.mc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "patterns": [
        {
          "include": "#var-expr"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "switch-expression": {
      "name": "switch-expression.expr.mc",
      "begin": "(?<!\\.|\\$)\\b(switch)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.switch.mc"
        },
        "2": {
          "name": "meta.brace.round.mc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "switch-block": {
      "name": "switch-block.expr.mc",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "end": "(?=\\})",
      "patterns": [
        {
          "include": "#case-clause"
        },
        {
          "include": "#statements"
        }
      ]
    },
    "case-clause": {
      "name": "case-clause.expr.mc",
      "begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.switch.mc"
        }
      },
      "end": ":",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.section.case-statement.mc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "switch-statement": {
      "name": "switch-statement.expr.mc",
      "begin": "(?<!\\.|\\$)(?=\\bswitch\\s*\\()",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.mc"
        }
      },
      "patterns": [
        {
          "include": "#switch-expression"
        },
        {
          "include": "#switch-block"
        }
      ]
    },
    "support-objects": {
      "patterns": [
        {
          "match": "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.math.mc"
            },
            "2": {
              "name": "punctuation.accessor.mc"
            },
            "3": {
              "name": "support.function.math.mc"
            },
            "4": {
              "name": "support.constant.property.math.mc"
            }
          }
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(System)(?:\\s*(\\.)\\s*(\n  print|println|getTimer|getClockTime|getSystemStats|trap|exit|error))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.class.system.mc"
            },
            "2": {
              "name": "punctuation.accessor.mc"
            },
            "3": {
              "name": "support.function.system.mc"
            }
          }
        },
        {
          "match": "(?x) (\\.) \\s* \n(?:\n (method)\n)(?=\\s*\\()",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.function.js"
            }
          }
        }
      ]
    },
    "function-call": {
      "begin": "(?=(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
      "end": "(?<=\\))(?!(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
      "patterns": [
        {
          "include": "#support-objects"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "name": "entity.name.function.mc",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "support.class.mc",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
        },
        {
          "match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.mc"
            },
            "2": {
              "name": "variable.other.constant.object.property.mc"
            },
            "3": {
              "name": "variable.other.object.property.mc"
            }
          }
        },
        {
          "match": "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  (function\\s*[(<])|(function\\s+)|\n  ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)|\n  ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\s*:) )) |\n  ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s*[^=>])|(\\s*[,]))) |\n  ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.mc"
            },
            "2": {
              "name": "entity.name.function.mc"
            }
          }
        },
        {
          "match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.mc"
            },
            "2": {
              "name": "variable.other.constant.property.mc"
            }
          }
        },
        {
          "match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.mc"
            },
            "2": {
              "name": "variable.other.property.mc"
            }
          }
        },
        {
          "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.constant.object.mc"
            },
            "2": {
              "name": "variable.other.object.mc"
            }
          }
        },
        {
          "name": "variable.other.constant.mc",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.mc",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "new-expr": {
      "name": "new.expr.mc",
      "begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.mc"
        }
      },
      "end": "(?<=\\))|(?=[;),}]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$)))",
      "patterns": [
        {
          "include": "#paren-expression"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#type"
        }
      ]
    },
    "object-member": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "meta.object.member.mc",
          "begin": "(?:[:_$[:alpha:]][_$[:alnum:]]*)\\s*(=>)",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.mc"
            },
            "1": {
              "name": "punctuation.separator.key-value.mc"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.expression.instanceof.mc",
          "match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.has.mc",
          "match": "(?<!\\.|\\$)\\bhas\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.new.mc",
          "match": "(?<!\\.|\\$)\\bnew\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.void.mc",
          "match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.assignment.compound.mc",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.mc",
          "match": "\\&=|\\^=|<<=|>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.mc",
          "match": "<<|>>"
        },
        {
          "name": "keyword.operator.comparison.mc",
          "match": "==|!="
        },
        {
          "name": "keyword.operator.relational.mc",
          "match": "<=|>=|<>|<|>"
        },
        {
          "name": "keyword.operator.logical.mc",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.expression.logical.mc",
          "match": "(?<!\\.|\\$)\\band|or|not\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.bitwise.mc",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.mc",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.mc",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.mc",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.mc",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "match": "(?<=[_$[:alnum:])])\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.mc"
            }
          }
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.mc",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.mc",
      "match": ";"
    },
    "punctuation-accessor": {
      "name": "punctuation.accessor.mc",
      "match": "\\."
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.mc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "qstring-double": {
      "name": "string.quoted.double.mc",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.mc"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.mc"
        },
        "2": {
          "name": "invalid.illegal.newline.mc"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "name": "string.quoted.single.mc",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.mc"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.mc"
        },
        "2": {
          "name": "invalid.illegal.newline.mc"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.mc",
      "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "literal": {
      "name": "literal.mc",
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#numericConstant-literal"
        },
        {
          "include": "#array-literal"
        }
      ]
    },
    "array-literal": {
      "name": "meta.array.literal.mc",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.mc"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.mc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.mc",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.mc",
          "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.mc",
          "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+[ld]?\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+[ld]?\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+[ld]?\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+[ld]?\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+[ld]?\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)[ld]?\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+[ld]?\\b)|                      # .1\n  (?:\\b[0-9]+[ld]?\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.mc"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.mc"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.mc"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.mc"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.mc"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.mc"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.mc"
            }
          }
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.mc",
          "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
        },
        {
          "name": "constant.language.boolean.false.mc",
          "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
        }
      ]
    },
    "null-literal": {
      "patterns": [
        {
          "name": "constant.language.null.mc",
          "match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
        }
      ]
    },
    "numericConstant-literal": {
      "patterns": [
        {
          "name": "constant.language.nan.mc",
          "match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
        }
      ]
    },
    "access-modifier": {
      "patterns": [
        {
          "name": "storage.modifier.mc",
          "match": "(?<!\\.|\\$)\\b(hidden|static)\\b(?!\\$)"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.documentation.mc",
          "begin": "/\\*\\*(?!/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.mc"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.mc"
            }
          }
        },
        {
          "name": "comment.block.mc",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.mc"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.mc"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.mc"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.line.double-slash.mc",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.mc"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.monkeyc"
}